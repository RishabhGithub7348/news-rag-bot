# News Chatbot Application

The News Chatbot Application is a full-stack solution for real-time news-based conversations. It consists of a **frontend** built with Next.js, TypeScript, React, and TanStack Query, and a **backend** powered by FastAPI, Python, TimescaleDB, and Redis. The frontend provides a responsive user interface to interact with the chatbot, while the backend handles session management, news ingestion, and real-time response generation using Google's Gemini model via LangChain.

### Watch the News Chatbot Application Documentary Video

[![chatbot](https://github.com/user-attachments/assets/be7a9609-b524-41dc-b597-703a2de063c6)](https://www.youtube.com/watch?v=XU2K9PIML48)

## Frontend Overview

The frontend is built using Next.js (App Router) with TypeScript, offering a seamless chat interface. It communicates with the backend via HTTP APIs and WebSocket for real-time messaging. The UI is styled with Tailwind CSS, and TanStack Query is used for efficient data fetching and caching.

## Backend Overview

The backend, built with FastAPI, ingests news articles from an RSS feed, stores them in TimescaleDB with embeddings, and maintains conversation history in Redis. It processes user queries with context-aware responses generated by Google's Gemini model, delivered via WebSocket for real-time interaction.

## Features

### Frontend Features

- Start a new chat session with a unique session token.
- Send messages and receive real-time bot responses via WebSocket.
- Display conversation history fetched from the backend using TanStack Query.
- Handle WebSocket reconnection with retry logic (up to 5 attempts, every 3 seconds).
- Show a "thinking" animation while the bot processes responses.
- Responsive UI styled with Tailwind CSS.

### Backend Features

- Start chat sessions and generate unique session tokens.
- Ingest news articles from an RSS feed and store them in TimescaleDB with embeddings.
- Process user queries with context from news articles and conversation history.
- Deliver real-time responses via WebSocket.
- Maintain conversation history in Redis.
- Optimized ingestion: skips re-ingestion if articles are recent (within 1 hour).

## Detailed READMEs

For detailed setup, usage, and development instructions, refer to the following:

- [Frontend README](./frontend/README.md)
- [Backend README](./backend/README.md)

## License

This project is licensed for frontend and for the backend. See the respective `LICENSE` files in the `frontend/` and `backend/` directories for details.

## Contact

For questions or support, reach out to [Rishabh Maurya](mailto:rishabhmaurya7654@gmail.com)
